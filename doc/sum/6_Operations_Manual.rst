Operations Manual
=================

Set-up and Initialization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first step to include the mathematical library into another software project is to build the static library from the library source code. For this procedure, a configuration script and a Makefile are prepared.

First the user has to run the configuration script. During configuration you will be asked ...

* ... for the path to the compilation toolchain.
* ... for additional compilation flags.
* ... whether the platform does not support subnormals and as such uses a non-standard :ref:`FTZ/DAZ <ABBR>` mode.
* ... whether you want ``long double`` procedures (this will only be asked if the toolchain informs the configuration script that ``long double`` are 64 bit in size).
* ... for your platforms endianess (this will only be asked if the toolchain does not provide the answer).
* ... whether you want complex procedures.

The Makefile provides the following targets:

* ``all``: Compiles and builds the library.
* ``debug``: Compiles and builds the library. Same as ``all``.
* ``release``: Compiles and builds the library. Add the compilation flag ``-DNDEBUG``, afterwards runs ``all``.
* ``clean``: Removes the object files and the static library of the chosen build.
* ``cleanall``: Removes the object files and static libraries from all builds.
* ``distclean``: Removes files generated by the configuration script.
* ``install``: The library does not need to be installed. As such running ``install`` only yields an information message.

The targets ``all``, ``debug``, ``release``, and ``clean`` can be modified using the following constants:

* ``CROSS_COMPILE``: Prefix to tell the Makefile which compiler to use. This is usually already set during configuration.
* ``ARCH``: Tells the Makefile for which architecture the build is intended. If not provided this defaults to a target stated by the :ref:`GCC <ABBR>` provided via ``CROSS_COMPILE``.
* ``COVERAGE=true``: Tells the Makefile to use flags specific to the generation of coverage reports.

The resulting libraries can be found in the ``build-ARCH/bin`` directory, with ``ARCH`` being the provided constant, or if not provided defaults to the target defined by :ref:`GCC <ABBR>` (this can be inspected with the shell command ``gcc -v``). The intermediate object files can be found in the ``build-ARCH/obj`` directory.

Getting Started
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the last section, the code of the mathematical library is prepared in a static library. To use the library, the library header files have to be included in the user's source code. The useable header files are ``math.h``, and ``complex.h``. The complex procedures however will only exist if they wer chosen to during configuration.

Mode Selection and Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After writing the project specific code, the last step to build a program which includes the library is to compile the new software. During the compilation two steps are necessary for success:

#. Link to the static library (``libm.a``).
#. Include the header files located in ``libm/include``

As an example by using :ref:`GCC <ABBR>` the following line should work::

   $ gcc -o new_executable_software new_software_source_code.c ./qlibmcs/build-x86_64-linux-gnu/bin/libm.a -I./qlibmcs/libm/include

The user has to add a number of additional flags, beginning with those listed in :ref:`OperationsEnviromentSoftwareConfiguration`. One might also need a number of platform or hardware specific flags, e.g. the flag ``-qleon2`` when building for the Leon2 platform with Gaisler's :ref:`RTEMS <ABBR>`. Extra flags depend on the :ref:`OS <ABBR>`, the compilation toolchain, and possibly a :ref:`BSP <ABBR>`; please check the corresponding documentation for your situation. It is suggested to write a Makefile for this (or use tools for the creation of Makefiles).

Normal Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All accessible procedures within the library are shown in chapter :ref:`Purpose of the Software`. For detailed information on each procedure, take a look at the related subsection in :ref:`Reference Manual`.

Normal Termination
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each procedure in the library is executed when called and computes a result. There is no software interruption foreseen during the computation and the procedure terminates by returning the result. If there is an interrupt, e.g. a context switch caused by the underlying operating system, the correct re-schedule has to be managed by the causing operating system.

.. _OperationsManualErrorConditions:

Error Conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is no error condition handling in the library. The ``errno`` variable proposed by the :ref:`ISO <ABBR>` C standard is not set by the library. Error states may only be caused by the used hardware and must be handled by the user's software. For example the following errors may occur:

* Any :ref:`FPU <ABBR>` can produce traps depending on its configuration. See :ref:`OperationsEnviromentHardwareConfiguration` for more information.
* The program stack can overflow if the stack size limit is exceeded by calling one of the provided procedures, even though their memory footprint is rather low.  
